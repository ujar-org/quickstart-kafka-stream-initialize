spring :
  application :
    name : quickstart-kafka-stream-initialize
  kafka :
    producer :
      bootstrap-servers : ${spring.embedded.kafka.brokers}
      value-serializer : org.apache.kafka.common.serialization.StringSerializer
      properties :
        security.protocol : ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        sasl.mechanism : SCRAM-SHA-512
    consumer :
      bootstrap-servers : ${spring.embedded.kafka.brokers}
      value-deserializer : org.apache.kafka.common.serialization.StringDeserializer
      group-id : test-group
      auto-offset-reset : earliest
      properties :
        isolation.level : read_committed
        spring.json.trusted.packages : '*'
    admin :
      properties :
        bootstrap.servers : ${spring.embedded.kafka.brokers}
        security.protocol : ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
        sasl.mechanism : SCRAM-SHA-512
    streams :
      application-id : test.bsmsgkafkastreaminitialize
      properties :
        "default.key.serde" : 'org.apache.kafka.common.serialization.Serdes$StringSerde'
        "default.value.serde" : 'org.apache.kafka.common.serialization.Serdes$StringSerde'
        "default.deserialization.exception.handler" : "org.springframework.kafka.streams.RecoveringDeserializationExceptionHandler"
  jmx :
    enabled : true

ujar :
  build :
    description : '@project.description@'
    relative-path : ''
    version : '@project.version@'
  kafka :
    admin :
      create-topics : true
    topics :
      for-input :
        name : test-input-topic
        partitions : 1
        retention : 30m
      for-output :
        name : test-output-topic
        partitions : 1
        retention : 30m
    error-handling :
      dead-letter :
        retention : 30s
        suffix : .DLT
      backoff :
        initial-interval : 500ms
        max-interval : 2s
        max-retries : 4
        multiplier : 1.5

producer.enabled : false
